#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 71 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 5430 0 28 3 10 #"#lang sicp"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; ----- 3.1.1 -----"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; given"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"withdraw"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 7 #"balance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 20 #"\"Insufficient funds\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 85
(5
 #"; the variable 'balance' is said to be encapsulated within the new-wi"
 #"thdraw procedure"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-withdraw"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 7 #"balance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"Insufficient funds\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-account"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"withdraw"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 7 #"balance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 20 #"\"Insufficient funds\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"deposit"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 7 #"balance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"withdraw"
0 0 24 3 2 #") "
0 0 14 3 8 #"withdraw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"deposit"
0 0 24 3 2 #") "
0 0 14 3 7 #"deposit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Unknown request -- MAKE-ACCOUNT\""
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.1"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 102
(6
 #"; Write a procedure make-accumulator that generates accumulators, eac"
 #"h maintaining an independent sum."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-accumulator"
0 0 24 3 1 #" "
0 0 14 3 5 #"total"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"increment"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"total"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"total"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 5 #"total"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"increment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-accumulator"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(a1 2) ; 2"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(a1 3) ; 5"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(a1 5) ; 10"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         241 21           0 0           0 39 0 17 3 32
#"; interesting solution w/ lambda"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-accumulator"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-value"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"sum"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-value"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 3 #"sum"
0 0 24 3 4 #"))) "
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.2"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 99
(7
 #"; Write a procedure make-monitored that takes as input a procedure, f"
 #", that itself takes one input."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 164
(8
 #"; The result returned by make-monitored is a third procedure, say mf,"
 #" that keeps track of the number of times it has been called by mainta"
 #"ining an internal counter."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 101
(9
 #"; If the input to mf is the special symbol how-many-calls?, then mf r"
 #"eturns the value of the counter."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 183
(10
 #"; If the input is the special symbol reset-count, then mf resets the "
 #"counter to zero. For any other input, mf returns the result of callin"
 #"g f on that input and increments the counter."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-monitored"
0 0 24 3 1 #" "
0 0 14 3 3 #"fcn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"times-called"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"increment"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"times-called"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"times-called"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"fcn"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"how-many-calls?"
0 0 24 3 2 #") "
0 0 14 3 12 #"times-called"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"reset-count"
0 0 24 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"times-called"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"how-many-calls?"
0 0 24 3 3 #") ("
0 0 14 3 15 #"how-many-calls?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"reset-count"
0 0 24 3 3 #") ("
0 0 14 3 11 #"reset-count"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 9 #"increment"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"Unnkown method -- MAKE-MONITORED\""
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-monitored"
0 0 24 3 1 #" "
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(s 100)              ; 10"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(s 25)               ; 5"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(s 'how-many-calls?) ; 2"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(s 'reset-count)     ;"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(s 25)               ; 5"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(s 'how-many-calls?) ; 1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.3"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 83
(11
 #"; Modify the make-account procedure so that it creates password-prote"
 #"cted accounts."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"make-protected-account"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 8 #"password"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #"; initial value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"password-errors"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #"; withdraw"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"withdraw"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"handle-pass"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 7 #"balance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 20 #"\"Insufficient funds\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 9 #"; deposit"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"deposit"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 11 #"handle-pass"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 7 #"balance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 11 #"; call cops"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"call-the-cops"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 64
#"\"Incorrect password attempted 7 consecutive times, calling cops\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 21 #"; handle password use"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"handle-pass"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 15 #"password-errors"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 15 #"password-errors"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 15 #"password-errors"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 14 3 15 #"password-errors"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 13 #"call-the-cops"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 20 #"\"Incorrect password\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; dispatch messsage-recieving object"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 8 #"password"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"withdraw"
0 0 24 3 2 #") "
0 0 14 3 8 #"withdraw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"deposit"
0 0 24 3 2 #") "
0 0 14 3 7 #"deposit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Unknown"
0 0 19 3 25 #" request -- MAKE-ACCOUNT\""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 11 #"handle-pass"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 22 #"make-protected-account"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pass"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";((a2 "
0 0 17 3 9 #"'withdraw"
0 0 17 3 1 #" "
0 0 17 3 35 #"'pas) 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 5 #";((a2"
0 0 17 3 2 #" '"
0 0 17 3 44 #"withdraw 'pass) 1001) ; \"Insufficient funds\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"a2"
0 0 17 3 28 #" 'withdraw 'pass) 50)   ; 50"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"a2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 27 #"deposit 'pass) 60)    ; 110"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"a2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 44 #"withdraw 'pas) 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"a2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 36 #" 'pas) 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"a2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 36 #" 'pas) 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"a2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 36 #" 'pas) 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"a2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 36 #" 'pas) 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #"(("
0 0 17 3 2 #"a2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 36 #" 'pas) 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"a2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 87
(12
 #" 'pas) 10)    ; error: \"Incorrect password attempted 7 consecutive t"
 #"imes, calling cops\""
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.4"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 228
(13
 #";  Modify the make-account procedure of exercise 3.3 by adding anothe"
 #"r local state variable so that, if an account is accessed more than s"
 #"even consecutive times with an incorrect password, it invokes the pro"
 #"cedure call-the-cops."
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 30 #"; See above for implementation"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 63
#"; Good solution from community wiki below, credit to \"Han Chan\""
0 0 24 29 1 #"\n"
0 9        1393 21           0 0           0 231 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"secure-make-account"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 8 #"password"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"error-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"call-the-police"
0 0 24 3 2 #") "
0 0 19 3 38 #"\"Too much errors, we have called LAPD\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"withdraw"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 3 #")) "
0 0 14 3 7 #"balance"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 20 #"\"Insufficient funds\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"deposit"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 3 #")) "
0 0 14 3 7 #"balance"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #"  (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"withdraw"
0 0 24 3 2 #") "
0 0 14 3 8 #"withdraw"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"deposit"
0 0 24 3 2 #") "
0 0 14 3 7 #"deposit"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Unknown request -- MAKE-ACCOUNT\""
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ) "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"auth-layer"
0 0 24 3 1 #" "
0 0 14 3 4 #"pass"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"pass"
0 0 24 3 1 #" "
0 0 14 3 8 #"password"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"error-count"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 11 #"error-count"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 19 3 20 #"\"Incorrect password\""
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"secure-layer"
0 0 24 3 1 #" "
0 0 14 3 4 #"pass"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 11 #"error-count"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"call-the-police"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"auth-layer"
0 0 24 3 1 #" "
0 0 14 3 4 #"pass"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 12 #"secure-layer"
0 0 24 3 1 #")"
0           0 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; ----- 3.1.2 -----"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; given"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         187 21           0 0           0 30 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-init"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"rand-update"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         241 21           0 0           0 39 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"estimate-pi"
0 0 24 3 1 #" "
0 0 14 3 6 #"trials"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 11 #"monte-carlo"
0 0 24 3 1 #" "
0 0 14 3 6 #"trials"
0 0 24 3 1 #" "
0 0 14 3 11 #"cesaro-test"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cesaro-test"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 3 #"gcd"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rand"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"monte-carlo"
0 0 24 3 1 #" "
0 0 14 3 6 #"trials"
0 0 24 3 1 #" "
0 0 14 3 10 #"experiment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 16 #"trials-remaining"
0 0 24 3 1 #" "
0 0 14 3 13 #"trials-passed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 16 #"trials-remaining"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 13 #"trials-passed"
0 0 24 3 1 #" "
0 0 14 3 6 #"trials"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 10 #"experiment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 16 #"trials-remaining"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 13 #"trials-passed"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 16 #"trials-remaining"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 13 #"trials-passed"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"trials"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"random-in-range"
0 0 24 3 1 #" "
0 0 14 3 3 #"low"
0 0 24 3 1 #" "
0 0 14 3 4 #"high"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"range"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"high"
0 0 24 3 1 #" "
0 0 14 3 3 #"low"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"low"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.5"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 238
(14
 #"; Implement Monte Carlo integration as a procedure estimate-integral "
 #"that takes as arguments a predicate P, upper and lower bounds x1, x2,"
 #" y1, and y2 for the rectangle, and the number of trials to perform in"
 #" order to produce the estimate."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 94
(15
 #"; Your procedure should use the same monte-carlo procedure that was u"
 #"sed above to estimate pi."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 5 #"; Use"
0 0 17 3 1 #" "
0 0 17 3 4 #"your"
0 0 17 3 1 #" "
0 0 17 3 17 #"estimate-integral"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 7 #"produce"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 8 #"estimate"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 4 #" pi "
0 0 17 3 2 #"by"
0 0 17 3 1 #" "
0 0 17 3 9 #"measuring"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 4 #"area"
0 0 17 3 1 #" "
0 0 17 3 17 #"of a unit circle."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"estimate-integral"
0 0 24 3 1 #" "
0 0 14 3 1 #"P"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 6 #"trials"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"area"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-circle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"rand-x"
0 0 24 3 2 #" ("
0 0 14 3 15 #"random-in-range"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"rand-y"
0 0 24 3 2 #" ("
0 0 14 3 15 #"random-in-range"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"rand-x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"P"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"rand-y"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"P"
0 0 24 3 6 #")))) ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"rand-x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"P"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"rand-y"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"P"
0 0 24 3 6 #")))) ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"estimate-pi"
0 0 24 3 1 #" "
0 0 14 3 4 #"area"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 4 #"area"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"integral estimate: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"area"
0 0 24 3 2 #" ("
0 0 14 3 11 #"monte-carlo"
0 0 24 3 1 #" "
0 0 14 3 6 #"trials"
0 0 24 3 1 #" "
0 0 14 3 9 #"in-circle"
0 0 24 3 2 #") "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"pi estiamte: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 11 #"estimate-pi"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"area"
0 0 24 3 2 #" ("
0 0 14 3 11 #"monte-carlo"
0 0 24 3 1 #" "
0 0 14 3 6 #"trials"
0 0 24 3 1 #" "
0 0 14 3 9 #"in-circle"
0 0 24 3 2 #") "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #") "
0 0 14 3 6 #"radius"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 17 #"estimate-integral"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 3 #"1.0"
0 0 17 3 1 #" "
0 0 17 3 3 #"1.0"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 20 #" -1.0 -1.0) 1000000)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";rand-update"
0 0 17 3 1 #" "
0 0 17 3 3 #"==>"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 7 #"updated"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 3 #" (("
0 0 17 3 2 #"ax"
0 0 17 3 1 #" "
0 0 17 3 1 #"+"
0 0 17 3 10 #" b) mod m)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"psuedo-rand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"rand-update"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"modulo"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"75"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"74"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 3 #"tag"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reset"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"generate"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"rand-update"
0 0 24 3 3 #")) "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Unknown request -- PSUEDO-RAND\""
0 0 24 3 1 #" "
0 0 14 3 3 #"tag"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"psuedo-rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";((r1 'generate)) ; 74"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";((r1 'generate)) ; 5624"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 28652"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 51790"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 17641"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 15 #"r1 'reset) 10) "
0 0 24 29 1 #"\n"
0 0 17 3 23 #";((r1 'generate)) ; 824"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 61874"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 53034"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 45404"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 62987"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 13 #"r1 'reset) 0)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";((r1 'generate)) ; 74"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";((r1 'generate)) ; 5624"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 28652"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 51790"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";((r1 'generate)) ; 17641"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.7"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 95
(16
 #"; Define a procedure make-joint that accomplishes this. Make-joint sh"
 #"ould take three arguments."
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 5 #"; The"
0 0 17 3 1 #" "
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 30 #" a password-protected account."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 5 #"; The"
0 0 17 3 1 #" "
0 0 17 3 6 #"second"
0 0 17 3 1 #" "
0 0 17 3 8 #"argument"
0 0 17 3 1 #" "
0 0 17 3 4 #"must"
0 0 17 3 1 #" "
0 0 17 3 5 #"match"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"password"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 5 #"which"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 7 #"account"
0 0 17 3 1 #" "
0 0 17 3 3 #"was"
0 0 17 3 1 #" "
0 0 17 3 7 #"defined"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 5 #"order"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 10 #"make-joint"
0 0 17 3 22 #" operation to proceed."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 5 #"; The"
0 0 17 3 1 #" "
0 0 17 3 5 #"third"
0 0 17 3 1 #" "
0 0 17 3 8 #"argument"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 16 #" a new password."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #"; Make-joint"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 6 #"create"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 10 #"additional"
0 0 17 3 1 #" "
0 0 17 3 6 #"access"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"original"
0 0 17 3 1 #" "
0 0 17 3 7 #"account"
0 0 17 3 1 #" "
0 0 17 3 23 #"using the new password."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 31 #"make-enhanced-protected-account"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 8 #"password"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 14 #"security-level"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #"; initial value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 23 #"; custom security level"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"security"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 14 #"security-level"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 14 #"security-level"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #"; withdraw"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"withdraw"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 7 #"balance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 20 #"\"Insufficient funds\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 9 #"; deposit"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"deposit"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"balance"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 7 #"balance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 12 #"; auth-layer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"auth-layer"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 8 #"password"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 13 #"            ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 12 #"secure-layer"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #"; secure-layer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"secure-layer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 14 3 7 #"ecurity"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"Incorrect password attempted\""
0 0 24 3 1 #" "
0 0 14 3 8 #"security"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"consecutive "
0 0 19 3 20 #"times, calling cops\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 20 #"\"Incorrect password\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rtrue"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; dispatch messsage-recieving object"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"withdraw"
0 0 24 3 2 #") "
0 0 14 3 8 #"withdraw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"deposit"
0 0 24 3 2 #") "
0 0 14 3 7 #"deposit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"joint"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"rtrue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Unknown"
0 0 19 3 25 #" request -- MAKE-ACCOUNT\""
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 7 #"request"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 10 #"auth-layer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; i don't really like the duplicated code here..."
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; ...would"
0 0 17 3 1 #" "
0 0 17 3 4 #"need"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 8 #"abstract"
0 0 17 3 1 #" "
0 0 17 3 8 #"security"
0 0 17 3 1 #" "
0 0 17 3 51 #"layer into separate object and wrap account objects"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-joint"
0 0 24 3 1 #" "
0 0 14 3 4 #"acct"
0 0 24 3 1 #" "
0 0 14 3 9 #"acct-pass"
0 0 24 3 1 #" "
0 0 14 3 8 #"password"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 14 #"security-level"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 3 #" (("
0 0 14 3 4 #"acct"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"joint"
0 0 24 3 1 #" "
0 0 14 3 9 #"acct-pass"
0 0 24 3 2 #") "
0 0 14 3 3 #"nil"
0 0 24 3 2 #") "
0 0 19 3 20 #"\"Incorrect password\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"Unable to create joint account: Incorrect password\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #"; initial value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 23 #"; custom security level"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"security"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 14 #"security-level"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 14 #"security-level"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 12 #"; auth-layer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"auth-layer"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 8 #"password"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"acct"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 1 #" "
0 0 14 3 9 #"acct-pass"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 12 #"secure-layer"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #"; secure-layer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"secure-layer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 7 #"invalid"
0 0 24 3 1 #" "
0 0 14 3 8 #"security"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"Incorrect password attempted\""
0 0 24 3 1 #" "
0 0 14 3 8 #"security"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 11 #"consecutive"
0 0 19 3 1 #" "
0 0 19 3 20 #"times, calling cops\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 20 #"\"Incorrect password\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 10 #"auth-layer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"acct1"
0 0 24 3 2 #" ("
0 0 14 3 31 #"make-enhanced-protected-account"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pass"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 5 #"acct1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"pas"
0 0 17 3 31 #") 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 5 #"acct1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"pass"
0 0 17 3 30 #") 1001) ; \"Insufficient funds\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 5 #"acct1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 18 #" 'pass) 50)   ; 50"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 5 #"acct1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 7 #"deposit"
0 0 17 3 20 #" 'pass) 60)    ; 110"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #"(("
0 0 17 3 5 #"acct1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"pas"
0 0 17 3 31 #") 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 5 #"acct1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"pas"
0 0 17 3 31 #") 10)    ; \"Incorrect password\""
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 5 #"acct1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 18 #"withdraw 'pass) 0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 5 #"acct2"
0 0 17 3 2 #" ("
0 0 17 3 10 #"make-joint"
0 0 17 3 1 #" "
0 0 17 3 5 #"acct1"
0 0 17 3 1 #" "
0 0 17 3 16 #"'pass 'pass2)) ;"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 5 #"acct2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 18 #" 'pass2) 10) ; 100"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 5 #"acct1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"withdraw"
0 0 17 3 16 #" 'pass) 0) ; 100"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.8"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 204
(17
 #"; Define a simple procedure f such that evaluating (+ (f 0) (f 1)) wi"
 #"ll return 0 if the arguments to + are evaluated from left to right bu"
 #"t will return 1 if the arguments are evaluated from right to left."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"simple-test"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 21 3 13 #"9999999999999"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"min-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 3 #"min"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"min-val"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 11 #"simple-test"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 1 #"+"
0 0 17 3 2 #" ("
0 0 17 3 1 #"f"
0 0 17 3 14 #" 0) (f 1)) ; 0"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 1 #"+"
0 0 17 3 2 #" ("
0 0 17 3 1 #"f"
0 0 17 3 1 #" "
0 0 17 3 13 #"1) (f 0)) ; 1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; 3.9"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";  recursive factorial"
0 0 24 29 1 #"\n"
0 0 17 3 70
(18
 #";   _________________................................________________"
 #"_"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(19
 #";  |GLOBAL                                                           "
 #" |"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(20
 #";  |                                                                 "
 #" |"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(21
 #";  |_________________................................________________"
 #"_|"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";                 /|\\                                          /|\\"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";                  |                                            |"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; (factorial 6)    |                            (factorial 1)   |"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";                _____                                        _____"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";               |    |                                       |    | "
0 0 24 29 1 #"\n"
0 0 17 3 67
#";            E1 |n:6 |                                    E2 |n:1 |"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";               |____|                                       |____|"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";     (* 6 (factorial (- 6 1)                                  n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";  iterative factorial"
0 0 24 29 1 #"\n"
0 0 17 3 110
(22
 #";   ______________________________________________..................."
 #".............____________________________"
) 0 0 24 29 1 #"\n"
0 0 17 3 111
(23
 #";  |GLOBAL                                                           "
 #"                                         |"
) 0 0 24 29 1 #"\n"
0 0 17 3 111
(24
 #";  |                                                                 "
 #"                                         |"
) 0 0 24 29 1 #"\n"
0 0 17 3 111
(25
 #";  |______________________________________________..................."
 #".............____________________________|"
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(26
 #";                 /|\\                /|\\                           "
 #"                             /|\\"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(27
 #";                  |                  |                              "
 #"                            |"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(28
 #"; (factorial 6)    |                  |                              "
 #" (fact-iter 720 7 c 1)      |"
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(29
 #";                _____              ______________                   "
 #"                      ______________"
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(30
 #";               |    |             |             |                   "
 #"                     |             | "
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(31
 #";            E1 |n:6 |             |product: 1   |                   "
 #"                  E2 |product: 720 |"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(32
 #";               |____|          E2 |counter: 1   |                   "
 #"                     |counter: 7   |             "
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(33
 #";         (fact-iter 1 1 6)        |max-count: 6 |                   "
 #"                     |max-count: 6 |"
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(34
 #";                                  |_____________|                   "
 #"                     |_____________|"
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(35
 #";                                 (fact-iter 1 2 6)                  "
 #"                           720"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.10"
0 0 24 29 1 #"\n"
0 0 17 3 147
(36
 #";  Use the environment model to analyze this alternate version of mak"
 #"e-withdraw, drawing figures like the ones above to illustrate the int"
 #"eractions"
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(37
 #";    ; (let (())) returns a procedure object to the global environmen"
 #"t, which is what make-withdraw is defined as"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 75
(38
 #"; the creation of W1/W2 sets the initial amount in the top-most envir"
 #"onment"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 4 #"; A "
0 0 17 3 7 #"balance"
0 0 17 3 146
(39
 #" value is maintained/updated via the procedure object that W1/W2 is d"
 #"efined as, which is not the same procedure object used to create the "
 #"accounts"
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(40
 #";   _________________________________________________________________"
 #"____________________________________"
) 0 0 24 29 1 #"\n"
0 0 17 3 111
(41
 #";  |GLOBAL                                                           "
 #"                                    |     "
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(42
 #";  |                                                                 "
 #"                                    |"
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(43
 #";  |make-withdraw: __________________________________________________"
 #"____________________________        |"
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(44
 #";  |W2:__________________________________________________            "
 #"                           |        |"
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(45
 #";  |W1:_____________                                    |            "
 #"                           |        |"
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(46
 #";  |               |                                    |            "
 #"                           |        |"
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(47
 #";  |_______________|____________________________________|____________"
 #"___________________________|________|"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(48
 #";                  |          ______|______             |            "
 #"    |                      |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(49
 #";                  |         |             |            |            "
 #"    |                      |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(50
 #";                  |      E1 |initial: 100 |            |            "
 #"    |                      |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(51
 #";                  |         |_____________|            |            "
 #"    |                      |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(52
 #";                  |                |                   |            "
 #"    |                      |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(53
 #";                  |          ______|______             |          __"
 #"____|______                |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(54
 #";                  |         |             |            |         |  "
 #"           |               |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(55
 #";                  |      E2 |balance: 50  |            |      E3 |in"
 #"itial: 100 |               |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(56
 #";                  |         |_____________|            |         |__"
 #"___________|               |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(57
 #";            _____/|\\_____          |             _____/|\\_____    "
 #"      |                      |"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(58
 #";           |      |      |         |            |      |      |     "
 #"    |                      |"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";           |"
0 0 17 3 99
(59
 #"  **  |  **  |---------|            |  **  |  **  |---------|        "
 #"     parameter: initial-amount"
) 0 0 24 29 1 #"\n"
0 0 17 3 131
(60
 #";           |______|______|                      |______|______|     "
 #"                       body: ((lambda (amount) (...)) initial)"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";              |                                    |"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";              |                                    |"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";              |------------------------------------|"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";              |"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";       parameters: amount                          "
0 0 24 29 1 #"\n"
0 0 17 3 43 #";       body: (if (>= balance amount) ... )"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.11"
0 0 24 29 1 #"\n"
0 0 17 3 80
(61
 #";    a. Show the environment structure generated by the sequence of i"
 #"nteractions"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";      (define acc (make-account 50))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";      ((acc 'deposit) 40) #90"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";      ((acc 'withdraw) 60) #30"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 139
(62
 #";      - not wanting to draw another one of these on the computer, th"
 #"is person took the time: http://community.schemewiki.org/?sicp-ex-3.1"
 #"1"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";    b. Where is the local state for acc kept? "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 108
(63
 #";      - local state for acc kept in the first frame created when the"
 #" 'acc' procedure object is instantiated"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 78
(64
 #";    c. Suppose we define another account --> (define acc2 (make-acco"
 #"unt 100))"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";       "
0 0 17 3 3 #"How"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"local"
0 0 17 3 1 #" "
0 0 17 3 6 #"states"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 3 #"two"
0 0 17 3 1 #" "
0 0 17 3 23 #"accounts kept distinct?"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";       Which"
0 0 17 3 1 #" "
0 0 17 3 5 #"parts"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 11 #"environment"
0 0 17 3 1 #" "
0 0 17 3 9 #"structure"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 6 #"shared"
0 0 17 3 1 #" "
0 0 17 3 21 #"between acc and acc2?"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 107
(65
 #";      - separate environment stores balance and procedures for acc2;"
 #" only the global environment is shared"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; given"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"append!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"last-pair"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"last-pair"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"last-pair"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.12"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 89
(66
 #"; What are the missing <response>s? Draw box-and-pointer diagrams to "
 #"explain your answer."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 10 #"; 1. ( b )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 14 #"; 2. ( b c d )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";     x ---> [ * ][ * ] --->  [ * ][ nil ]"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";              |                |"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";              |                |"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";            [ a ]            [ b ]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";     y ---> [ * ][ * ] --->  [ * ][ nil ]"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";              |                |"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";              |                |"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";            [ c ]            [ d ]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 73
(67
 #";     z ---> [ * ][ * ] ---> [ * ][ * ] ---> [ * ][ * ] ---> [ * ][ n"
 #"il ]"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";              |               |               |               |"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";              |               |               |               |"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";            [ a ]           [ b ]           [ c ]           [ d ]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 79
(68
 #";     w ==> x ---> [ * ][ * ] ---> [ * ][ * ] ---> [ * ][ * ] ---> [ "
 #"* ][ nil ]"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(69
 #";                    |               |               |               "
 #"|"
) 0 0 24 29 1 #"\n"
0 0 17 3 70 69 0 0 24 29 1 #"\n"
0 0 17 3 72
(70
 #";                  [ a ]           [ b ]           [ c ]           [ "
 #"d ]"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.13"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 107
(71
 #"; Consider the following make-cycle procedure, which uses the last-pa"
 #"ir procedure defined in exercise 3.12:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-cycle"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"last-pair"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #"; Draw"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 15 #"box-and-pointer"
0 0 17 3 1 #" "
0 0 17 3 7 #"diagram"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 5 #"shows"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 9 #"structure"
0 0 17 3 1 #" "
0 0 17 3 12 #"z created by"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 9 #"; (define"
0 0 17 3 1 #" "
0 0 17 3 1 #"z"
0 0 17 3 2 #" ("
0 0 17 3 10 #"make-cycle"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 12 #" 'a 'b 'c)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";               <------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";              |                                   /|\\"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";             \\|/                                   |"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";     z ---> [ * ][ * ] ---> [ * ][ * ] ---> [ * ][ * ]"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";              |               |               |"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";              |               |               |"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";            [ a ]           [ b ]           [ c ]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #"; What"
0 0 17 3 1 #" "
0 0 17 3 7 #"happens"
0 0 17 3 1 #" "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 2 #"we"
0 0 17 3 1 #" "
0 0 17 3 3 #"try"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 7 #"compute"
0 0 17 3 2 #" ("
0 0 17 3 13 #"last-pair z)?"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 55 #"; infinite recursion b/c there is no (null? (cdr pair))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.14"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mystery"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 1 #"y"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"temp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"loop"
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"loop"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"mystery"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 6 #" 3 4))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 39 #"; Explain what mystery does in general."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 52 #"; mystery is essentially a reverse of the input list"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 135
(72
 #"; Suppose v is defined by (define v (list 'a 'b 'c 'd)). Draw the box"
 #"-and-pointer diagram that represents the list to which v is bound."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 73
(73
 #";     v ---> [ * ][ * ] ---> [ * ][ * ] ---> [ * ][ * ] ---> [ * ][ n"
 #"il ]"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";              |               |               |               |"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";              |               |               |               |"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";            [ a ]           [ b ]           [ c ]           [ d ]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 151
(74
 #"; Suppose that we now evaluate (define w (mystery v)). Draw box-and-p"
 #"ointer diagrams that show the structures v and w after evaluating thi"
 #"s expression."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 152
(75
 #"; unsure of the role of environments here and whether or not underlyi"
 #"ng environments point to new objects have been created, or if identit"
 #"ies are shared"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";      ("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"v"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 6 #"c 'd))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";      v"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";      (define"
0 0 17 3 1 #" "
0 0 17 3 1 #"w"
0 0 17 3 13 #" (mystery v))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";      v"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";      w"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 169
(76
 #"; ^after experimentation, it looks that the global variable v shares "
 #"the object that is passed to and defined in the environment created b"
 #"y calling the mystery procedure"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 89
(77
 #"; as such, v is modified to ( a nil ) ==> ( a ) in the first iteratio"
 #"n of loop in mystery"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 50 #"; What would be printed as the values of v and w ?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 13 #"; v ==> ( a )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 19 #"; w ==> ( d c b a )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.15"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 103
(78
 #"; Draw box-and-pointer diagrams to explain the effect of set-to-wow! "
 #"on the structures z1 and z2 above."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; z1"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; (("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 6 #") a b)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; (set-to-wow! z1)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; (("
0 0 17 3 3 #"wow"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 8 #") wow b)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";  z1 ---> [ * ][ * ]"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";            |    |"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";            |    |"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";          [ * ][ * ] ---> [ * ][ nil ]"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";            |               |"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";            |               |"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";        [ 'wow ]          [ b ]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; z2"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; (("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 6 #") a b)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; (set-to-wow! z2)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; (("
0 0 17 3 3 #"wow"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 6 #") a b)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";  z2 ---> [ * ][ * ] ---------> [ * ][ * ] ---> [ * ][ nil ]"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";            |                     |               |"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";            |                     |               | "
0 0 24 29 1 #"\n"
0 0 17 3 54 #";          [ * ][ * ] ---        [ a ]           [ b ]"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";            |           |                         |"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";            |           |                         |"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";        [ 'wow ]        |                         |"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";                        |                         |"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";                         ---------------------> [ * ][ nil ]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.16"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-pairs"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-pairs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"count-pairs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 93
(79
 #"; Show that this procedure is not correct to count the number of pair"
 #"s in any list structure."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 4 #"; In"
0 0 17 3 1 #" "
0 0 17 3 10 #"particular"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"draw"
0 0 17 3 1 #" "
0 0 17 3 15 #"box-and-pointer"
0 0 17 3 1 #" "
0 0 17 3 8 #"diagrams"
0 0 17 3 1 #" "
0 0 17 3 12 #"representing"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 10 #"structures"
0 0 17 3 1 #" "
0 0 17 3 4 #"made"
0 0 17 3 1 #" "
0 0 17 3 2 #"up"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 7 #"exactly"
0 0 17 3 1 #" "
0 0 17 3 5 #"three"
0 0 17 3 1 #" "
0 0 17 3 5 #"pairs"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 5 #"which"
0 0 17 3 1 #" "
0 0 17 3 3 #"Ben"
0 0 17 3 1 #"'"
0 0 17 3 1 #"s"
0 0 17 3 1 #" "
0 0 17 3 9 #"procedure"
0 0 17 3 1 #" "
0 0 17 3 5 #"would"
0 0 17 3 51 #" return 3; return 4; return 7; never return at all."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 69
(80
 #"; better solution here: http://community.schemewiki.org/?sicp-ex-3.16"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";--------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; x1 ==> ( 1 2 3 ) ==> 3"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; x1 ---> [ * ][ * ] ---> [ * ][ * ] --> [ * ][ nil ]"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";           |               |              |"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";           |               |              |"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";         [ 1 ]           [ 2 ]          [ 3 ]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";--------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; incorrect, has 4 pairs"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";\\          /\\          /\\          /"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; x2 ==> ( (1 2) 3 ) ==> 4\\        /"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";  \\      /    \\      /    \\      /"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; x2\\--->/[ * ][\\* ] ---> [ * ][ nil ]"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";    \\  /   |    \\  /       |\\  /"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";     \\/    |     \\/      [ 3 ]/"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";     /\\    |     /\\          /\\"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";    /  \\ [ * ][ * ]\\---> [ */][\\nil ]"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";   /    \\  |   /    \\      |    \\"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";  /      \\ |  /      \\    /|     \\"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; /       [\\1 ]        \\  [ 2 ]    \\"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";/          \\/          \\/          \\"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";--------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; x3 ==> (make-cycle x1) ==> infinite loop"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";             <------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";            |                                   /|\\"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";           \\|/                                   |"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";  x3 ---> [ * ][ * ] ---> [ * ][ * ] ---> [ * ][ * ]"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";            |               |               |"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";            |               |               |"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";          [ 1 ]           [ 2 ]           [ 3 ]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";--------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.17"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 132
(81
 #"; Devise a correct version of the count-pairs procedure of exercise 3"
 #".16 that returns the number of distinct pairs in any structure."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"count-pairs-revised"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"seen"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"seen-pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 9 #"comp_list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"comp_list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"seen"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"seen"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"comp_list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"seen-pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"comp_list"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-pairs"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 10 #"seen-pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"seen"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-pairs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"count-pairs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-pairs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"count-pairs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"count-pairs"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (count-pairs (list 1 2 3))         ==> 3"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (count-pairs-revised (list 1 2 3)) ==> 3"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; (define"
0 0 17 3 1 #" "
0 0 17 3 2 #"x2"
0 0 17 3 9 #" '(foo)) "
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 2 #"y2"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 9 #" x2 x2)) "
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; (define str2 (list y2))"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (count-pairs str2)                 ==> 4"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (count-pairs-revised str2)         ==> 3"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 2 #"x3"
0 0 17 3 9 #" '(foo)) "
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 2 #"y3"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 9 #" x3 x3)) "
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 4 #"str3"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 8 #" y3 y3))"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (count-pairs str2)                 ==> 7"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (count-pairs-revised str3)         ==> 3"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; 3.18/3.19"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 208
(82
 #"; Write a procedure that examines a list and determines whether it co"
 #"ntains a cycle, that is, whether a program that tried to find the end"
 #" of the list by taking successive cdrs would go into an infinite loop"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 62
#"; Use an algorithm that takes only a constant amount of space."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"contains-cycle"
0 0 24 3 1 #" "
0 0 14 3 4 #"full"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"iter-cdr"
0 0 24 3 1 #" "
0 0 14 3 10 #"sub-struct"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 10 #"sub-struct"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"iter-cdr"
0 0 24 3 1 #" "
0 0 14 3 10 #"sub-struct"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"iter-compare"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 3 #"sub"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sub"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 8 #"iter-cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"sub"
0 0 24 3 2 #") "
0 0 14 3 4 #"full"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"iter-compare"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"sub"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"iter-compare"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"full"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 14 #"contains-cycle"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 15 #"2 3)) ; ---> #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"z"
0 0 17 3 2 #" ("
0 0 17 3 10 #"make-cycle"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 7 #"b 'c)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 38 #"contains-cycle z)            ; ---> #t"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         625 21           0 0           0 103 0 17 3 23
#"; using tests of others"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"contains-cycle"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 17 3 5 #"; #f "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"contains-cycle"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 17 3 5 #"; #t "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"contains-cycle"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 17 3 5 #"; #t "
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.20"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 87
(83
 #"; Draw environment diagrams to illustrate the evaluation of the seque"
 #"nce of expressions"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 6 #" 1 2))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"z"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 6 #" x x))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"set-car!"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 7 #" z) 17)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";(car x)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";17"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 108
(84
 #"; using the procedural implementation of pairs given above ==> http:/"
 #"/community.schemewiki.org/?sicp-ex-3.20"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; given"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #") ("
0 0 14 3 8 #"set-car!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-rear-ptr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #") ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-queue"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"front-queue"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"FRONT called with an empty queue\""
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"insert-queue!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-pair"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"set-rear-ptr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 5 #"queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 2 #") "
0 0 14 3 8 #"new-pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"set-rear-ptr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 5 #"queue"
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"delete-queue!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"DELETE! called with an empty queue\""
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 5 #"queue"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.21"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 70
(85
 #"; a. Show why Ben's examples produce the printed results that they do"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";(define q1 (make-queue))   ==> makes empty queue"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 179
(86
 #";(insert-queue! q1 'a)      ==> sets both front pointer and rear poin"
 #"ter to (cons 'a '()), even though we operate on the data structure as"
 #" if there were a single item in the queue"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";((a) a)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 13 #"insert-queue!"
0 0 17 3 1 #" "
0 0 17 3 133
(87
 #"q1 'b)      ==> (set-cdr!) operates on the same pair that the front p"
 #"ointer points to, b/c as noted above they point to the same pair"
) 0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 169
(88
 #"b) b)                  \\_> therefore we see 'b appear in the cdr of "
 #"the front pair even though it's not reachable with our defined select"
 #"ors; front-queue will return 'a;"
) 0 0 24 29 1 #"\n"
0 0 17 3 129
(89
 #";                           \\_> it's worth noting that the front poi"
 #"nter and rear pointer are no longer pointing to the same pair"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 213
(90
 #"delete-queue! q1)         ==> delete-queue drops the 'a value from th"
 #"e front pointer, and now both front and rear pointers are pointing to"
 #" the same object, even though in-effect there is a single item in the"
 #" queue"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";((b) b)"
0 0 24 29 1 #"\n"
0 0 17 3 87
(91
 #";(delete-queue! q1)         ==> delete-queue drops the 'b value from "
 #"the front pointer;"
) 0 0 24 29 1 #"\n"
0 0 17 3 5 #";(() "
0 0 17 3 27 #"b)                     \\_> "
0 0 17 3 2 #"as"
0 0 17 3 1 #" "
0 0 17 3 9 #"mentioned"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 4 #"text"
0 0 17 3 1 #" "
0 0 17 3 12 #"empty-queue?"
0 0 17 3 1 #" "
0 0 17 3 4 #"only"
0 0 17 3 1 #" "
0 0 17 3 5 #"looks"
0 0 17 3 1 #" "
0 0 17 3 2 #"as"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"front"
0 0 17 3 1 #" "
0 0 17 3 7 #"pointer"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 4 #"this"
0 0 17 3 1 #" "
0 0 17 3 9 #"in-effect"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 5 #"empty"
0 0 17 3 1 #" "
0 0 17 3 5 #"queue"
0 0 17 3 1 #" "
0 0 17 3 4 #"even"
0 0 17 3 1 #" "
0 0 17 3 6 #"though"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"legacy"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 15 #"b value remains"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 110
(92
 #"; b. Define a procedure print-queue that takes a queue as input and p"
 #"rints the sequence of items in the queue."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"print-queue"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 17 #" q1 (make-queue))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 13 #"insert-queue!"
0 0 17 3 1 #" "
0 0 17 3 6 #"q1 'a)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 13 #"insert-queue!"
0 0 17 3 1 #" "
0 0 17 3 6 #"q1 'b)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 13 #"insert-queue!"
0 0 17 3 1 #" "
0 0 17 3 6 #"q1 'c)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 16 #"(print-queue q1)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(delete-queue! q1)"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(print-queue q1)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.22"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 127
(93
 #"; Complete the definition of make-queue and provide implementations o"
 #"f the queue operations using a local state representation."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-queue2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-queue"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 8 #"rear-ptr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"front-ptr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"front-queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"FRONT called with an empty queue\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-queue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"front-ptr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"insert-queue!"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-pair"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-pair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-pair"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"get-queue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"delete-queue!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 2 #")("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"DELETE! called with an empty queue\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-queue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"front-ptr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"front-ptr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"get-queue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"empty-"
0 0 14 3 6 #"queue?"
0 0 24 3 3 #")  "
0 0 14 3 12 #"empty-queue?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"front-queue"
0 0 24 3 4 #")   "
0 0 14 3 11 #"front-queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"insert-queue!"
0 0 24 3 2 #") "
0 0 14 3 13 #"insert-queue!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"delete-queue!"
0 0 24 3 2 #") "
0 0 14 3 13 #"delete-queue!"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 18 #" q2 (make-queue2))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 18 #"q2 'empty-queue?))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;((q2 'front-queue))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"q2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 18 #"insert-queue!) 'a)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"q2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 18 #"insert-queue!) 'b)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 2 #"q2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 18 #"insert-queue!) 'c)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 19 #"q2 'delete-queue!))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 17 #"q2 'front-queue))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9        3865 21           0 0           0 643 0 17 3 6 #"; 3.23"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 93
(94
 #"; Show how to represent deques using pairs, and give implementations "
 #"of the queue operations."
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 54 #"; All operations should be accomplished in O(1) steps."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 32 #"; front: oldest element in queue"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 31 #"; rear: recent element in queue"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 121
(95
 #"; incomplete: in reviewing, should create queue elements with pointer"
 #"s to prior, next item in queue (i.e., a linked list)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-dequeue"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-queue"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-queue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"front-ptr-dq"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"rear-ptr-dq"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"set-front-ptr-dq!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #") ("
0 0 14 3 8 #"set-car!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"set-rear-ptr-dq!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #") ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-dequeue?"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #") ("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"front-dequeue"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-dequeue?"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"FRONT called with an empty dequeue\""
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"front-ptr-dq"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rear-dequeue"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-dequeue?"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"REAR called with an empty dequeue\""
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 2 #" ("
0 0 14 3 11 #"rear-ptr-dq"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"front-insert-dequeue!"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"new-pair1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"new-pair2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 14 #"empty-dequeue?"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #") "
0 0 14 3 9 #"new-pair1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"set-rear-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #") "
0 0 14 3 9 #"new-pair1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #") "
0 0 14 3 9 #"new-pair2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"set-rear-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #") "
0 0 14 3 9 #"new-pair2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 34 #";(set-cdr! (rear-ptr dq) new-pair)"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 28 #";(set-rear-ptr! dq new-pair)"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 47 #";(set-cdr! (rear-ptr (front-ptr dq)) new-pair1)"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 2 #"dq"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"rear-insert-dequeue!"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"new-pair1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"new-pair2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 14 #"empty-dequeue?"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #") "
0 0 14 3 9 #"new-pair1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"set-rear-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #") "
0 0 14 3 9 #"new-pair1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #") "
0 0 14 3 9 #"new-pair2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"set-rear-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #") "
0 0 14 3 9 #"new-pair2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #")) "
0 0 14 3 9 #"new-pair1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"set-rear-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #") "
0 0 14 3 9 #"new-pair1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"dq"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"rear-delete-dequeue!"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 14 #"empty-dequeue?"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"DELETE! called with an empty queue\""
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cdar"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-dequeue?"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 13 #"set-rear-ptr!"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-queue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rear-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 2 #"dq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"front-delete-dequeue!"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"empty-queue?"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"DELETE! called with an empty queue\""
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"set-front-ptr!"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"front-ptr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 2 #"dq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(define dq1 (make-dequeue))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(empty-dequeue? dq1)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";dq1"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(rear-insert-dequeue! dq1 'a)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(rear-insert-dequeue! dq1 'b)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(rear-insert-dequeue! dq1 'c)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(rear-insert-dequeue! dq1 'd)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(rear-delete-dequeue! dq1)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(rear-delete-dequeue! dq1)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(rear-delete-dequeue! dq1)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(rear-delete-dequeue! dq1)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(front-insert-dequeue! dq1 'c)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(front-insert-dequeue! dq1 'd)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(front-insert-dequeue! dq1 'e)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(rear-insert-dequeue! dq1 'a)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(front-delete-dequeue! dq1)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(rear-delete-dequeue! dq1)"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; given"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"local-table"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"*table*"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"subtable"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"insert!"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"subtable"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 24 3 5 #")    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"lookup-proc"
0 0 24 3 2 #") "
0 0 14 3 6 #"lookup"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"insert-proc!"
0 0 24 3 2 #") "
0 0 14 3 7 #"insert!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Unknown operation -- TABLE\""
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; 3.24"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 135
(96
 #"; Design a table constructor make-table that takes as an argument a s"
 #"ame-key? procedure that will be used to test ``equality'' of keys."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #"; Make-table"
0 0 17 3 1 #" "
0 0 17 3 6 #"should"
0 0 17 3 1 #" "
0 0 17 3 6 #"return"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 8 #"dispatch"
0 0 17 3 1 #" "
0 0 17 3 9 #"procedure"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 3 #"can"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 4 #"used"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 6 #"access"
0 0 17 3 1 #" "
0 0 17 3 11 #"appropriate"
0 0 17 3 1 #" "
0 0 17 3 6 #"lookup"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 7 #"insert!"
0 0 17 3 1 #" "
0 0 17 3 10 #"procedures"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 12 #"local table."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-table2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"local-table"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"*table*"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"subtable"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"insert!"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"subtable"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-1"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"key-2"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 24 3 5 #")    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 9 #"same-key?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 9 #"same-key?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"lookup-proc"
0 0 24 3 2 #") "
0 0 14 3 6 #"lookup"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"insert-proc!"
0 0 24 3 2 #") "
0 0 14 3 7 #"insert!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Unknown operation -- TABLE\""
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 6 #"table1"
0 0 17 3 15 #" (make-table2))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";((table1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 12 #"insert-proc!"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #"q"
0 0 17 3 2 #"ua"
0 0 17 3 1 #"l"
0 0 17 3 1 #"?"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 9 #"subtable1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 5 #"'dog)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 20 #"table1 'insert-proc!"
0 0 17 3 1 #" "
0 0 17 3 8 #"equal?) "
0 0 17 3 1 #"'"
0 0 17 3 9 #"subtable1"
0 0 17 3 2 #" '"
0 0 17 3 7 #"b 'cat)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 6 #"table1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 12 #"insert-proc!"
0 0 17 3 1 #" "
0 0 17 3 6 #"equal?"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 9 #"subtable1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 5 #"'cow)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 6 #"table1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 11 #"lookup-proc"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #"q"
0 0 17 3 4 #"ual?"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 9 #"subtable1"
0 0 17 3 1 #" "
0 0 17 3 3 #"'b)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 6 #"table1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 12 #"insert-proc!"
0 0 17 3 1 #" "
0 0 17 3 6 #"equal?"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 9 #"subtable1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 5 #"'rat)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 6 #"table1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 11 #"lookup-proc"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 5 #"qual?"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 9 #"subtable1"
0 0 17 3 1 #" "
0 0 17 3 3 #"'b)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"make-arbitrary-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"local-table"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"*table*"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lookup-init"
0 0 24 3 1 #" "
0 0 14 3 2 #"kl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 2 #"kl"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"subtable"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"lookup"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 2 #") "
0 0 14 3 8 #"subtable"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"insert-init!"
0 0 24 3 1 #" "
0 0 14 3 2 #"kl"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"insert!"
0 0 24 3 1 #" "
0 0 14 3 2 #"kl"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"local-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"insert!"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"subtable"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"insert!"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtable"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 14 3 1 #"-"
0 0 14 3 1 #"l"
0 0 14 3 3 #"ist"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 9 #"same-key?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 9 #"same-key?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"records"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"lookup-proc"
0 0 24 3 2 #") "
0 0 14 3 11 #"lookup-init"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"insert-proc!"
0 0 24 3 2 #") "
0 0 14 3 12 #"insert-init!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Unknown operation -- TABLE\""
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"atable"
0 0 24 3 2 #" ("
0 0 14 3 20 #"make-arbitrary-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(("
0 0 14 3 6 #"atable"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"lookup-proc"
0 0 24 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(("
0 0 14 3 6 #"atable"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"insert-proc!"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 14 3 1 #"q"
0 0 14 3 4 #"ual?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"subtable1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 6 #"atable"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 12 #"insert-proc!"
0 0 17 3 1 #" "
0 0 17 3 6 #"equal?"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 9 #"subtable1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"b"
0 0 17 3 2 #") "
0 0 17 3 5 #"'cat)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";(("
0 0 17 3 6 #"atable"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 12 #"insert-proc!"
0 0 17 3 1 #" "
0 0 17 3 6 #"equal?"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 9 #"subtable1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"c"
0 0 17 3 2 #") "
0 0 17 3 5 #"'cow)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(("
0 0 14 3 6 #"atable"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"lookup-proc"
0 0 24 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"subtable1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0           0
